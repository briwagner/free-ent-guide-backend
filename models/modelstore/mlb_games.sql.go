// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.25.0
// source: mlb_games.sql

package modelstore

import (
	"context"
	"database/sql"
)

const mLBFindGameByID = `-- name: MLBFindGameByID :one
SELECT mlb_games.id, mlb_games.created_at, mlb_games.updated_at, gametime, game_id, description, status, mlb_games.link, home_id, visitor_id, home_score, visitor_score, mlbt.id, mlbt.created_at, mlbt.updated_at, team_id, name, mlbt.link FROM mlb_games
  INNER JOIN mlb_teams mlbt ON (
    (mlb_games.home_id = mlbt.id)
    OR
    (mlb_games.visitor_id = mlbt.id)
  )
WHERE mlb_games.id = ? LIMIT 1
`

type MLBFindGameByIDRow struct {
	ID           int64
	CreatedAt    sql.NullTime
	UpdatedAt    sql.NullTime
	Gametime     sql.NullTime
	GameID       sql.NullInt64
	Description  sql.NullString
	Status       sql.NullString
	Link         sql.NullString
	HomeID       sql.NullInt64
	VisitorID    sql.NullInt64
	HomeScore    sql.NullInt64
	VisitorScore sql.NullInt64
	ID_2         int64
	CreatedAt_2  sql.NullTime
	UpdatedAt_2  sql.NullTime
	TeamID       sql.NullInt64
	Name         sql.NullString
	Link_2       sql.NullString
}

func (q *Queries) MLBFindGameByID(ctx context.Context, id int64) (MLBFindGameByIDRow, error) {
	row := q.db.QueryRowContext(ctx, mLBFindGameByID, id)
	var i MLBFindGameByIDRow
	err := row.Scan(
		&i.ID,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.Gametime,
		&i.GameID,
		&i.Description,
		&i.Status,
		&i.Link,
		&i.HomeID,
		&i.VisitorID,
		&i.HomeScore,
		&i.VisitorScore,
		&i.ID_2,
		&i.CreatedAt_2,
		&i.UpdatedAt_2,
		&i.TeamID,
		&i.Name,
		&i.Link_2,
	)
	return i, err
}

const mLBLoadGamesByDate = `-- name: MLBLoadGamesByDate :many
SELECT mlb_games.id, mlb_games.created_at, mlb_games.updated_at, gametime, game_id, description, status, mlb_games.link, home_id, visitor_id, home_score, visitor_score, mlbt.id, mlbt.created_at, mlbt.updated_at, team_id, name, mlbt.link FROM mlb_games
  INNER JOIN mlb_teams mlbt ON (
    (mlb_games.home_id = mlbt.id)
    OR
    (mlb_games.visitor_id = mlbt.id)
  )
WHERE mlb_games.gametime BETWEEN ? AND ?
ORDER BY mlb_games.gametime
`

type MLBLoadGamesByDateParams struct {
	FromGametime sql.NullTime
	ToGametime   sql.NullTime
}

type MLBLoadGamesByDateRow struct {
	ID           int64
	CreatedAt    sql.NullTime
	UpdatedAt    sql.NullTime
	Gametime     sql.NullTime
	GameID       sql.NullInt64
	Description  sql.NullString
	Status       sql.NullString
	Link         sql.NullString
	HomeID       sql.NullInt64
	VisitorID    sql.NullInt64
	HomeScore    sql.NullInt64
	VisitorScore sql.NullInt64
	ID_2         int64
	CreatedAt_2  sql.NullTime
	UpdatedAt_2  sql.NullTime
	TeamID       sql.NullInt64
	Name         sql.NullString
	Link_2       sql.NullString
}

func (q *Queries) MLBLoadGamesByDate(ctx context.Context, arg MLBLoadGamesByDateParams) ([]MLBLoadGamesByDateRow, error) {
	rows, err := q.db.QueryContext(ctx, mLBLoadGamesByDate, arg.FromGametime, arg.ToGametime)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []MLBLoadGamesByDateRow
	for rows.Next() {
		var i MLBLoadGamesByDateRow
		if err := rows.Scan(
			&i.ID,
			&i.CreatedAt,
			&i.UpdatedAt,
			&i.Gametime,
			&i.GameID,
			&i.Description,
			&i.Status,
			&i.Link,
			&i.HomeID,
			&i.VisitorID,
			&i.HomeScore,
			&i.VisitorScore,
			&i.ID_2,
			&i.CreatedAt_2,
			&i.UpdatedAt_2,
			&i.TeamID,
			&i.Name,
			&i.Link_2,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}
