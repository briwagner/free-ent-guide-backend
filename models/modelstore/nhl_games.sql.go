// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.28.0
// source: nhl_games.sql

package modelstore

import (
	"context"
	"database/sql"
)

const nHLCreateGame = `-- name: NHLCreateGame :execlastid
INSERT INTO nhl_games
  (gametime, game_id, description, status, link, home_id, visitor_id, home_score, visitor_score, updated_at)
  VALUES
    (?, ?, ?, ?, ?, ?, ?, ?, ?, ?)
`

type NHLCreateGameParams struct {
	Gametime     sql.NullTime
	GameID       sql.NullInt64
	Description  sql.NullString
	Status       sql.NullString
	Link         sql.NullString
	HomeID       int64
	VisitorID    int64
	HomeScore    sql.NullInt64
	VisitorScore sql.NullInt64
	UpdatedAt    sql.NullTime
}

func (q *Queries) NHLCreateGame(ctx context.Context, arg NHLCreateGameParams) (int64, error) {
	result, err := q.db.ExecContext(ctx, nHLCreateGame,
		arg.Gametime,
		arg.GameID,
		arg.Description,
		arg.Status,
		arg.Link,
		arg.HomeID,
		arg.VisitorID,
		arg.HomeScore,
		arg.VisitorScore,
		arg.UpdatedAt,
	)
	if err != nil {
		return 0, err
	}
	return result.LastInsertId()
}

const nHLDeleteGames = `-- name: NHLDeleteGames :exec
DELETE FROM nhl_games
`

func (q *Queries) NHLDeleteGames(ctx context.Context) error {
	_, err := q.db.ExecContext(ctx, nHLDeleteGames)
	return err
}

const nHLFindGameByID = `-- name: NHLFindGameByID :one
SELECT ng.id, ng.game_id, ng.gametime, ng.description, ng.status, ng.home_score, ng.visitor_score,
  ht.id AS homeID, ht.team_id AS homeTeamID, ht.name AS homeName,
  at.id AS awayID, at.team_id AS awayTeamID, at.name AS awayName
  FROM nhl_games AS ng
  INNER JOIN nhl_teams AS ht ON (ng.home_id = ht.id)
  INNER JOIN nhl_teams AS at ON (ng.visitor_id = at.id)
  WHERE game_id = ?
`

type NHLFindGameByIDRow struct {
	ID           int64
	GameID       sql.NullInt64
	Gametime     sql.NullTime
	Description  sql.NullString
	Status       sql.NullString
	HomeScore    sql.NullInt64
	VisitorScore sql.NullInt64
	Homeid       int64
	Hometeamid   int64
	Homename     sql.NullString
	Awayid       int64
	Awayteamid   int64
	Awayname     sql.NullString
}

func (q *Queries) NHLFindGameByID(ctx context.Context, gameID sql.NullInt64) (NHLFindGameByIDRow, error) {
	row := q.db.QueryRowContext(ctx, nHLFindGameByID, gameID)
	var i NHLFindGameByIDRow
	err := row.Scan(
		&i.ID,
		&i.GameID,
		&i.Gametime,
		&i.Description,
		&i.Status,
		&i.HomeScore,
		&i.VisitorScore,
		&i.Homeid,
		&i.Hometeamid,
		&i.Homename,
		&i.Awayid,
		&i.Awayteamid,
		&i.Awayname,
	)
	return i, err
}

const nHLLatestGames = `-- name: NHLLatestGames :many
SELECT id, gametime
  FROM nhl_games
  WHERE DATE(gametime) = (
    SELECT DATE(gametime)
    FROM nhl_games
    ORDER BY gametime
    DESC LIMIT 1
  )
`

type NHLLatestGamesRow struct {
	ID       int64
	Gametime sql.NullTime
}

func (q *Queries) NHLLatestGames(ctx context.Context) ([]NHLLatestGamesRow, error) {
	rows, err := q.db.QueryContext(ctx, nHLLatestGames)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []NHLLatestGamesRow
	for rows.Next() {
		var i NHLLatestGamesRow
		if err := rows.Scan(&i.ID, &i.Gametime); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const nHLLoadGamesByDate = `-- name: NHLLoadGamesByDate :many
SELECT ng.id, ng.game_id, ng.gametime, ng.description, ng.status, ng.home_score, ng.visitor_score,
  ht.id AS homeID, ht.team_id AS homeTeamID, ht.name AS homeName,
  at.id AS awayID, at.team_id AS awayTeamID, at.name AS awayName
  FROM nhl_games AS ng
  INNER JOIN nhl_teams AS ht ON (ng.home_id = ht.id)
  INNER JOIN nhl_teams AS at ON (ng.visitor_id = at.id)
  WHERE ng.gametime BETWEEN ? AND ?
  ORDER BY ng.gametime
`

type NHLLoadGamesByDateParams struct {
	FromGametime sql.NullTime
	ToGametime   sql.NullTime
}

type NHLLoadGamesByDateRow struct {
	ID           int64
	GameID       sql.NullInt64
	Gametime     sql.NullTime
	Description  sql.NullString
	Status       sql.NullString
	HomeScore    sql.NullInt64
	VisitorScore sql.NullInt64
	Homeid       int64
	Hometeamid   int64
	Homename     sql.NullString
	Awayid       int64
	Awayteamid   int64
	Awayname     sql.NullString
}

func (q *Queries) NHLLoadGamesByDate(ctx context.Context, arg NHLLoadGamesByDateParams) ([]NHLLoadGamesByDateRow, error) {
	rows, err := q.db.QueryContext(ctx, nHLLoadGamesByDate, arg.FromGametime, arg.ToGametime)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []NHLLoadGamesByDateRow
	for rows.Next() {
		var i NHLLoadGamesByDateRow
		if err := rows.Scan(
			&i.ID,
			&i.GameID,
			&i.Gametime,
			&i.Description,
			&i.Status,
			&i.HomeScore,
			&i.VisitorScore,
			&i.Homeid,
			&i.Hometeamid,
			&i.Homename,
			&i.Awayid,
			&i.Awayteamid,
			&i.Awayname,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const nHLUpdateScore = `-- name: NHLUpdateScore :exec
UPDATE nhl_games
  SET home_score = ?, visitor_score = ?, status = ?
  WHERE game_id = ?
`

type NHLUpdateScoreParams struct {
	HomeScore    sql.NullInt64
	VisitorScore sql.NullInt64
	Status       sql.NullString
	GameID       sql.NullInt64
}

func (q *Queries) NHLUpdateScore(ctx context.Context, arg NHLUpdateScoreParams) error {
	_, err := q.db.ExecContext(ctx, nHLUpdateScore,
		arg.HomeScore,
		arg.VisitorScore,
		arg.Status,
		arg.GameID,
	)
	return err
}
