// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.28.0
// source: mlb_teams.sql

package modelstore

import (
	"context"
	"database/sql"
)

const mLBCreateTeam = `-- name: MLBCreateTeam :execlastid
INSERT IGNORE INTO mlb_teams
  (team_id, name, link, updated_at)
VALUES
  (?, ?, ?, ?)
`

type MLBCreateTeamParams struct {
	TeamID    int64
	Name      sql.NullString
	Link      sql.NullString
	UpdatedAt sql.NullTime
}

func (q *Queries) MLBCreateTeam(ctx context.Context, arg MLBCreateTeamParams) (int64, error) {
	result, err := q.db.ExecContext(ctx, mLBCreateTeam,
		arg.TeamID,
		arg.Name,
		arg.Link,
		arg.UpdatedAt,
	)
	if err != nil {
		return 0, err
	}
	return result.LastInsertId()
}

const mLBDeleteTeams = `-- name: MLBDeleteTeams :exec
DELETE FROM mlb_teams
`

func (q *Queries) MLBDeleteTeams(ctx context.Context) error {
	_, err := q.db.ExecContext(ctx, mLBDeleteTeams)
	return err
}

const mLBFindTeamByID = `-- name: MLBFindTeamByID :one
SELECT id, updated_at, team_id, name, link FROM mlb_teams
  WHERE team_id = ?
`

func (q *Queries) MLBFindTeamByID(ctx context.Context, teamID int64) (MlbTeam, error) {
	row := q.db.QueryRowContext(ctx, mLBFindTeamByID, teamID)
	var i MlbTeam
	err := row.Scan(
		&i.ID,
		&i.UpdatedAt,
		&i.TeamID,
		&i.Name,
		&i.Link,
	)
	return i, err
}
